<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;700&display=swap");
      @import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap");
      * {
        box-sizing: border-box;
        margin: 0;
      }
      body,
      html {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        height: 100%;
      }
      svg {
        cursor: pointer;
      }

      .navigation {
        width: 100%;
        min-height: 60px;
        background-color: white;
        position: sticky;
        top: 0;
        z-index: 1;
        border: 0.5px solid #76767637;
      }

      .case {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .container {
        display: flex;
        width: 900px;
        height: 90%;
        background-color: #ffffff;
        border: 0.5px solid #76767637;
      }

      img {
        user-select: none;
        -moz-user-select: none;
        -webkit-user-select: none;
      }

      .left {
        min-width: 100%;
        max-width: 350px;
        height: 100%;
        display: flex;
        flex-direction: column;
        overflow-x: hidden;
      }

      .left > .top {
        position: relative;
        min-height: 60px;
        width: 100%;
        background-color: #0f0f0f;
        border-bottom: 0.5px solid #76767637;
        display: flex;
        align-items: center;
      }

      .left > .top > .tub {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 15px;
        font-family: "Open Sans";
        color: white;
        width: 100%;
      }
      .left > .top > .tub > .username {
        max-width: 50%;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: flex;
        align-items: center;
        gap: 5px;
      }

      .left > .top > .tub > .username > .down-arrow {
        cursor: pointer;
      }

      .left > .top > .card {
        position: absolute;
        padding: 0 10px;
        right: 10px;
      }
      .left > .top > .card > button {
        background-color: #ffffff;
        border: 0.5px solid #76767637;
        padding: 4px 8px;
        color: #323232;
        font-family: "Open Sans";
        font-weight: 700;
        font-size: 12px;
        border-radius: 12px;
        cursor: pointer;
      }
      .left > .top > .card > button:hover {
        color: #767676;
      }

      .left > .conversations {
        overflow-y: scroll;
        background-color: #0f0f0f;
        height: 100%;
        padding: 10px 0 0 0;
        overflow-x: hidden;
      }

      .conversations > .dm-link .person {
        display: flex;
        align-items: center;
        padding: 10px;
        background-color: #0f0f0f;
        gap: 10px;
      }

      .conversations > .dm-link .person:hover {
        background-color: #f0f0f0af;
        cursor: pointer;
      }

      .conversations > .dm-link .person > .information {
        font-family: "Open Sans";
        font-size: 14px;
        display: flex;
        flex-direction: column;
        gap: 4px;
        width: 100%;
        overflow: hidden;
        user-select: none;
        -moz-user-select: none;
        -webkit-user-select: none;
      }

      .conversations > .dm-link .person > .information > .username {
        font-family: "Open Sans";
        font-size: 14px;
        color: white;
        display: flex;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        gap: 4px;
        width: 100%;
        align-items: center;
      }

      .conversations > .dm-link .person > .information > .content {
        display: flex;
        align-items: center;
        gap: 5px;
        width: 100%;
        color: white;
      }

      .conversations > .dm-link .person > .information > .content > .message {
        max-width: 70%;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-family: "Roboto";
      }

      .conversations > .dm-link .person > .information > .content > .new {
        max-width: 70%;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-family: "Roboto";
        color: white;
        font-weight: 700;
      }

      .conversations > .dm-link .person > .box {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .conversations > .dm-link .person > .box > .image {
        width: clamp(50px, 50px, 50px);
        height: clamp(50px, 50px, 50px);
        border-radius: 100%;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .conversations > .dm-link .person > .box > .online {
        min-width: 1.1rem;
        min-height: 1.1rem;
        background-color: lawngreen;
        border-radius: 100%;
        position: absolute;
        border: 3px solid white;
        right: 0;
        bottom: 0;
      }

      .conversations > .dm-link .person > .status {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 1rem;
      }

      .conversations > .dm-link .person > .status > .point {
        min-height: 8px;
        min-width: 8px;
        background-color: #0084ff;
        border-radius: 100%;
      }

      .right {
        border-left: 0.5px solid #76767637;
        width: inherit;
        height: 100%;
        display: flex;
        flex-direction: column;
        overflow: hidden;
      }

      .right > .top {
        width: 100%;
        display: flex;
        min-height: 60px;
        align-items: center;
        padding: 0 20px;
        border-bottom: 0.5px solid #76767637;
        gap: 1rem;
      }

      .right > .top > .box {
        position: relative;
        min-width: 30px;
        min-height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .right > .top > .box > .image {
        display: flex;
        align-items: center;
        border: none;
        border-radius: 100%;
        overflow: hidden;
      }

      .right > .top > .box > .online {
        position: absolute;
        min-width: 12px;
        min-height: 12px;
        background-color: lawngreen;
        border-radius: 100%;
        border: 2px solid #ffffff;
        right: 0;
        bottom: 0;
      }

      .right > .top > .information {
        display: flex;
        align-items: flex-start;
        justify-content: start;
        flex-direction: column;
        width: 100%;
        overflow: hidden;
        gap: 0;
        text-overflow: ellipsis;
      }

      .right > .top > .information > .username,
      .name {
        width: 100%;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        font-size: 14px;
        font-family: "Open Sans";
      }
      .right > .top .information > .username {
        font-weight: 400;
        font-size: 15px;
        display: flex;
      }
      .blue-tick {
        display: flex;
        align-items: center;
        justify-content: center;
        user-select: none;
        -moz-user-select: none;
        -webkit-user-select: none;
        cursor: default;
      }

      .right > .top > .information > .username > a {
        color: black;
        text-decoration: none;
        display: flex;
        align-items: center;
        justify-content: flex-start;
        gap: 2.5px;
      }

      .right > .top .information > .name {
        font-weight: 400;
        font-size: 12px;
        color: #707070;
      }

      .right > .top > .options {
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .right > .top > .options > .info {
        border: none;
        background-color: transparent;
        display: flex;
        align-items: center;
        justify-content: center;
        user-select: none;
      }

      .right > .middle {
        background-color: #ffffff;
        height: inherit;
        display: flex;
        flex-direction: column-reverse;
        overflow-y: auto;
      }

      .messages {
        display: flex;
        flex-direction: column;
        padding: 10px;
        gap: 2.5px;
      }

      .clip {
        display: flex;
      }

      .clip > .text {
        font-family: "Open Sans";
        font-size: 14px;
        font-weight: 400;
        max-width: 50%;
        padding: 8px 16px;
        border-radius: 20px;
        word-break: keep-all;
        white-space: pre-wrap;
        word-wrap: break-word;
      }

      .received > .text {
        background-color: white;
        border: 0.5px solid #80808080;
      }

      .sent > .text {
        background-color: #0084ff;
        color: white;
      }

      .sent {
        flex-direction: row-reverse;
      }

      .seen {
        text-align: right;
        padding: 0 10px;
        font-family: "Open Sans";
        font-size: 0.75rem;
        font-weight: 400;
        color: gray;
      }

      .right > .bottom {
        height: auto;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 14px 28px;
      }

      .cup {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #ffffff;
        border: 0.5px solid #7676765c;
        width: 100%;
        gap: 10px;
        padding: 2px 15px;
        border-radius: 40px;
        overflow: hidden;
      }

      .cup > .picker {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        width: clamp(35px, 35px, 35px);
        height: clamp(35px, 35px, 35px);
        user-select: none;
      }

      .cup > textarea {
        font-family: "Open Sans";
        font-size: 0.85rem;
        font-weight: 400;
        border: none;
        outline: none;
        padding: 0 5px;
        width: 100%;
        resize: none;
        max-height: 100px;
      }

      .cup > .send {
        border: none;
        padding: 5px 10px;
        background-color: transparent;
        font-family: "Open Sans";
        font-size: 14px;
        font-weight: 700;
        color: #0084ff;
      }

      .send:disabled {
        color: #0084ff8d;
      }

      @media only screen and (max-width: 950px) {
        .container {
          border-top: none;
          width: 100%;
          height: 100%;
        }
      }
    </style>
  </head>
  <body>
    <% include ./partials/header.ejs %>
    <div class="case">
      <div class="container">
        <div class="left">
          <div class="top">
            <div class="tub">
              <div class="username">
                adduser
                <svg
                  width="20px"
                  height="20px"
                  version="1.1"
                  id="Layer_1"
                  xmlns="http://www.w3.org/2000/svg"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                  x="0px"
                  y="0px"
                  viewBox="0 0 40 40"
                  style="enable-background: new 0 0 40 40"
                  xml:space="preserve"
                >
                  <style type="text/css">
                    .da0 {
                      fill: #ffffff;
                      stroke: #000000;
                      stroke-width: 3;
                      stroke-miterlimit: 10;
                    }

                    .da1 {
                      fill: #ffffff;
                      stroke: #000000;
                      stroke-width: 3;
                      stroke-miterlimit: 10;
                    }
                  </style>
                  <path class="da0" d="M4.35,11.85" />
                  <polyline
                    class="da1"
                    points="2.93,10.71 20,29.29 37.07,10.71 "
                  />
                </svg>
              </div>
            </div>

            <div class="card">
              <svg
                width="30px"
                height="27.5px"
                version="1.1"
                id="Layer_1"
                xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                x="0px"
                y="0px"
                viewBox="0 0 100 100"
                style="enable-background: new 0 0 100 100"
                xml:space="preserve"
              >
                <style type="text/css">
                  .nm0 {
                    fill: none;
                    stroke: #000000;
                    stroke-width: 5;
                    stroke-miterlimit: 10;
                  }

                  .nm1 {
                    fill: none;
                    stroke: #000000;
                    stroke-width: 5;
                    stroke-miterlimit: 10;
                  }

                  .nm2 {
                    fill: none;
                    stroke: #000000;
                    stroke-width: 4;
                    stroke-miterlimit: 10;
                  }

                  .nm3 {
                    fill: none;
                    stroke: #000000;
                    stroke-width: 5;
                    stroke-miterlimit: 10;
                  }
                </style>
                <path
                  class="nm0"
                  d="M90,50v25c0,8.3-6.7,15-15,15H25c-8.3,0-15-6.7-15-15V25c0-8.3,6.7-15,15-15h25"
                />
                <path
                  class="nm1"
                  d="M31.7,62.8l50.5-52.1c0.7-0.7,1.7-0.8,2.3-0.3l5.1,5c0.6,0.5,0.5,1.6-0.2,2.3L38.9,69.7"
                />
                <path
                  class="nm2"
                  d="M38.3,71l-9.7,2.2l1.9-9.7c0.1-0.6,0.9-1,1.3-0.6l7.1,6.9C39.2,70.1,38.9,70.8,38.3,71z"
                />
                <line class="nm3" x1="75.1" y1="18" x2="82.3" y2="24.9" />
              </svg>
            </div>
          </div>

          <div class="conversations">
            <a href="/dm" class="dm-link">
              <div class="person">
                <div class="box">
                  <div class="image">
                    <img
                      src="https://cdn2.bigcommerce.com/server5400/3po1k2/products/8171/images/14559/161_light_blue__46032.1418747956.1280.1280.jpg?c=2g"
                      width="50px"
                      height="50px"
                      alt=""
                    />
                  </div>
                  <div class="online"></div>
                </div>

                <div class="information">
                  <div class="username">
                    John New user
                    <svg
                      width="20px"
                      height="20px"
                      version="1.1"
                      id="Layer_1"
                      xmlns="http://www.w3.org/2000/svg"
                      xmlns:xlink="http://www.w3.org/1999/xlink"
                      x="0px"
                      y="0px"
                      viewBox="0 0 100 100"
                      style="enable-background: new 0 0 100 100"
                      xml:space="preserve"
                    >
                      <style type="text/css">
                        .st0 {
                          fill: #0084ff;
                        }

                        .st1 {
                          fill: none;
                          stroke: #0084ff;
                          stroke-miterlimit: 10;
                        }

                        .st2 {
                          fill: #ffffff;
                          stroke: #ffffff;
                          stroke-width: 0.25;
                          stroke-miterlimit: 10;
                        }
                      </style>
                      <g>
                        <path
                          class="st0"
                          d="M81.2,50c0,1.8-2.5,3.3-2.8,5c-0.3,1.7,1.5,4,1,5.7c-0.6,1.7-3.5,2.2-4.4,3.7c-0.9,1.5,0.1,4.3-1,5.7
                c-1.1,1.3-4.1,0.9-5.4,2c-1.3,1.1-1.4,4.1-2.9,5c-1.5,0.9-4.1-0.6-5.7,0c-1.6,0.6-2.7,3.4-4.4,3.7c-1.7,0.3-3.6-1.9-5.4-1.9
                c-1.8,0-3.7,2.2-5.4,1.9c-1.7-0.3-2.8-3.1-4.4-3.7c-1.7-0.6-4.2,0.8-5.8,0c-1.5-0.9-1.6-3.8-2.9-5c-1.3-1.1-4.3-0.7-5.4-2
                c-1.1-1.3-0.2-4.1-1-5.7c-0.9-1.5-3.8-2.1-4.4-3.7c-0.6-1.6,1.3-3.9,1-5.7c-0.3-1.7-2.8-3.2-2.8-5c0-1.8,2.5-3.3,2.8-5
                c0.3-1.7-1.5-4-1-5.7c0.6-1.7,3.5-2.2,4.4-3.7c0.9-1.5-0.1-4.3,1-5.7c1.1-1.3,4.1-0.9,5.4-2c1.3-1.1,1.4-4.1,2.9-5
                c1.5-0.9,4.1,0.6,5.7,0c1.6-0.6,2.7-3.4,4.4-3.7c1.7-0.3,3.6,1.9,5.4,1.9c1.8,0,3.7-2.2,5.4-1.9c1.7,0.3,2.8,3.1,4.4,3.7
                c1.7,0.6,4.2-0.8,5.8,0c1.5,0.9,1.6,3.8,2.9,5c1.3,1.1,4.3,0.7,5.4,2c1.1,1.3,0.2,4.1,1,5.7c0.9,1.5,3.8,2.1,4.4,3.7
                c0.6,1.6-1.3,3.9-1,5.7C78.7,46.7,81.2,48.2,81.2,50z"
                        />
                        <path
                          class="st1"
                          d="M81.2,50c0,1.8-2.5,3.3-2.8,5c-0.3,1.7,1.5,4,1,5.7c-0.6,1.7-3.5,2.2-4.4,3.7c-0.9,1.5,0.1,4.3-1,5.7
                c-1.1,1.3-4.1,0.9-5.4,2c-1.3,1.1-1.4,4.1-2.9,5c-1.5,0.9-4.1-0.6-5.7,0c-1.6,0.6-2.7,3.4-4.4,3.7c-1.7,0.3-3.6-1.9-5.4-1.9
                c-1.8,0-3.7,2.2-5.4,1.9c-1.7-0.3-2.8-3.1-4.4-3.7c-1.7-0.6-4.2,0.8-5.8,0c-1.5-0.9-1.6-3.8-2.9-5c-1.3-1.1-4.3-0.7-5.4-2
                c-1.1-1.3-0.2-4.1-1-5.7c-0.9-1.5-3.8-2.1-4.4-3.7c-0.6-1.6,1.3-3.9,1-5.7c-0.3-1.7-2.8-3.2-2.8-5c0-1.8,2.5-3.3,2.8-5
                c0.3-1.7-1.5-4-1-5.7c0.6-1.7,3.5-2.2,4.4-3.7c0.9-1.5-0.1-4.3,1-5.7c1.1-1.3,4.1-0.9,5.4-2c1.3-1.1,1.4-4.1,2.9-5
                c1.5-0.9,4.1,0.6,5.7,0c1.6-0.6,2.7-3.4,4.4-3.7c1.7-0.3,3.6,1.9,5.4,1.9c1.8,0,3.7-2.2,5.4-1.9c1.7,0.3,2.8,3.1,4.4,3.7
                c1.7,0.6,4.2-0.8,5.8,0c1.5,0.9,1.6,3.8,2.9,5c1.3,1.1,4.3,0.7,5.4,2c1.1,1.3,0.2,4.1,1,5.7c0.9,1.5,3.8,2.1,4.4,3.7
                c0.6,1.6-1.3,3.9-1,5.7C78.7,46.7,81.2,48.2,81.2,50z"
                        />
                      </g>
                      <g>
                        <rect
                          x="50.7"
                          y="33.5"
                          transform="matrix(0.659 0.7521 -0.7521 0.659 55.6719 -23.4983)"
                          class="st2"
                          width="6.1"
                          height="32.3"
                        />
                        <rect
                          x="36.7"
                          y="47"
                          transform="matrix(0.7521 -0.659 0.659 0.7521 -26.4924 39.8687)"
                          class="st2"
                          width="6.1"
                          height="16.3"
                        />
                      </g>
                    </svg>
                  </div>
                  <div class="content">
                    <div class="message">hello</div>
                    <div class="time">&bull; 1d</div>
                  </div>
                </div>

                <div class="status">
                  <div class="point"></div>
                </div>
              </div>
            </a>
          </div>
        </div>
      </div>
    </div>
    <% include ./partials/footer.ejs %>
    <script>
      export class Utils {
        constructor(selector) {
          this.elements = Utils.getSelector(selector);
          this.element = this.get(0);
          return this;
        }

        on(events, listener) {
          events.split(" ").forEach((eventName) => {
            this.each((el) => {
              const tNEventName = Utils.setEventName(el, eventName);
              if (!Array.isArray(Utils.eventListeners[tNEventName])) {
                Utils.eventListeners[tNEventName] = [];
              }
              Utils.eventListeners[tNEventName].push(listener);

              // https://github.com/microsoft/TypeScript/issues/28357
              if (el) {
                el.addEventListener(eventName.split(".")[0], listener);
              }
            });
          });

          return this;
        }
        append(html) {
          this.each((el) => {
            if (typeof html === "string") {
              el.insertAdjacentHTML("beforeend", html);
            } else {
              el.appendChild(html);
            }
          });
          return this;
        }
        html(html) {
          if (html === undefined) {
            if (!this.element) {
              return "";
            }
            return this.element.innerHTML;
          }
          this.each((el) => {
            el.innerHTML = html;
          });
          return this;
        }
        static getSelector(selector, context) {
          if (selector && typeof selector !== "string") {
            if (selector.length !== undefined) {
              return selector;
            }
            return [selector];
          }
          context = context || document;

          // For performance reasons, use getElementById
          // eslint-disable-next-line no-control-regex
          const idRegex = /^#(?:[\w-]|\\.|[^\x00-\xa0])*$/;
          if (idRegex.test(selector)) {
            const el = document.getElementById(selector.substring(1));
            return el ? [el] : [];
          }
          return [].slice.call(context.querySelectorAll(selector) || []);
        }
        get(index) {
          if (index !== undefined) {
            return this.elements[index];
          }
          return this.elements;
        }
        each(func) {
          if (!this.elements.length) {
            return this;
          }
          this.elements.forEach((el, index) => {
            func.call(el, el, index);
          });
          return this;
        }
        static setEventName(el, eventName) {
          // Need to verify https://stackoverflow.com/questions/1915341/whats-wrong-with-adding-properties-to-dom-element-objects
          const elementUUId = el.eventEmitterUUID;
          const uuid = elementUUId || Utils.generateUUID();
          // eslint-disable-next-line no-param-reassign
          el.eventEmitterUUID = uuid;
          return Utils.getEventName(eventName, uuid);
        }
        static generateUUID() {
          return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
            /[xy]/g,
            (c) => {
              // eslint-disable-next-line no-bitwise
              const r = (Math.random() * 16) | 0;
              // eslint-disable-next-line no-bitwise
              const v = c === "x" ? r : (r & 0x3) | 0x8;
              return v.toString(16);
            }
          );
        }
        static getEventName(eventName, uuid) {
          return eventName + "__EVENT_EMITTER__" + uuid;
        }
      }

      Utils.eventListeners = {};

      export default function $utils(selector) {
        return new Utils(selector);
      }
    </script>
  </body>
</html>
